{"version":3,"sources":["components/TodoItem.js","components/Todos.js","components/layout/Header.js","components/AddTodo.js","components/pages/About.js","App.js","serviceWorker.js","index.js"],"names":["TodoItem","background","padding","borderBottom","textDecoration","this","props","todo","completed","id","title","style","getStyle","type","onChange","markComplete","bind","onClick","delTodo","btnStyle","Component","color","border","cursor","borderRadius","float","Todos","todos","map","key","linkStyle","headerStyle","textAlign","Header","to","AddTodo","state","e","setState","target","name","value","onSubmit","preventDefault","addTodo","display","placeholder","flex","className","About","Fragment","App","axios","delete","then","res","filter","post","data","get","exact","path","render","component","Boolean","window","location","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.72aa8b70.chunk.js","sourcesContent":["import React, { Component } from 'react'\nimport PropTypes from 'prop-types';\n\nexport class TodoItem extends Component {\n\n    // getStyle = () => {\n    //     if(this.props.todo.completed){\n    //         return {\n    //             textDecoration: 'line-through'\n    //         }\n    //     }\n    //     else{\n    //         return{\n    //             textDecoration: 'none'\n    //         }\n    //     }\n    // }\n\n getStyle() {\n       return {\n           background: '#f4f4f4',\n           padding: '10px',\n           borderBottom: ' 1px #ccc dotted',\n           textDecoration : this.props.todo.completed ? 'line-through' : 'none'\n       }\n    }\n\n    \n    render() {\n        const { id,title} = this.props.todo;\n        return (\n            <div style={this.getStyle()}>\n                <p>\n                    <input type=\"checkbox\" onChange={this.props.markComplete.bind(this,id)}/> {' '}\n                {title}\n                <button onClick = {this.props.delTodo.bind(this,id)}style= {btnStyle}>x</button>\n                </p>\n            </div>\n        )\n    }\n}\nTodoItem.propTypes = {\n    todo: PropTypes.object.isRequired\n}\n\nconst btnStyle = {\n    background: '#ff0000',\n    color: '#fff',\n    padding: '5px 9px',\n    border: 'none',\n    cursor: 'pointer',\n    borderRadius: '50%',\n    float: 'right'\n\n}\nexport default TodoItem\n\n","import React,{Component} from 'react';\nimport { render } from '@testing-library/react';\nimport TodoItem from './TodoItem';\nimport PropTypes from 'prop-types';\n// import './App.css';\n// \nclass Todos extends Component{\n\n   \nrender(){\n   return this.props.todos.map((todo)=> (\n    <TodoItem key={todo.id} todo={todo} markComplete={this.props.markComplete}\n    delTodo = {this.props.delTodo}/>\n   ));\n}\n}\n\nTodos.propTypes = {\n    todos: PropTypes.array.isRequired,\n    markComplete: PropTypes.func.isRequired,\n    delTodo: PropTypes.func.isRequired,\n    \n}\nexport default Todos;\n","import React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\n\nfunction Header(){\n    return (\n        <header style = {headerStyle}>\n            <Link style = {linkStyle} to=\"/\">Home</Link> | <Link  style = {linkStyle} to=\"/about\">About</Link>\n            <h1>TodoList</h1>\n        </header>\n    )\n}\n\nconst linkStyle = {\n    color: '#fff',\n    textDecoration: 'none'\n}\nconst headerStyle = {\n    background: '#333',\n    color: '#fff',\n    textAlign: 'center',\n    padding: '10px'\n}\nexport default Header\n","import React, { Component } from 'react'\n\nexport class AddTodo extends Component {\n    state = {\n        title: ''\n    }\n    \n    onChange = (e) => this.setState({[e.target.name]: e.target.value});\n    onSubmit = (e) => {\n        e.preventDefault();\n        this.props.addTodo(this.state.title);\n        this.setState({title: ''});\n    }\n    render() {\n        return (\n           <form onSubmit = {this.onSubmit} style ={{display: 'flex'}}>\n               <input type=\"text\" name=\"title\"\n               placeholder=\"Add Todo....\" style={{flex: '10' ,padding: '5px'}}\n               value = {this.state.title}\n               onChange = {this.onChange}/>\n\n               <input type=\"submit\" value=\"Submit\"\n               className = \"btn\" style={{flex: '1' , cursor: 'pointer'}}\n                />\n\n              \n           </form>\n        )\n    }\n}\n\nexport default AddTodo\n","import React from 'react'\n function About() {\n    return (\n       <React.Fragment>\n           <h1>About</h1>\n           <p>This is a Todo list app. Version: 1.0.0</p>\n       </React.Fragment>\n    )\n}\n\nexport default About;","import React,{Component} from 'react';\nimport Todos from './components/Todos';\nimport Header from './components/layout/Header';\nimport AddTodo from './components/AddTodo';\n// import {v4 as uuidv4} from 'uuid';\nimport {BrowserRouter as Router, Route} from 'react-router-dom';\nimport About from './components/pages/About';\nimport './App.css';\nimport { render } from '@testing-library/react';\nimport axios from 'axios';\n\nclass App extends Component{\n\n  state = {\n    todos: []\n  }\n\n  componentDidMount() {\n    axios.get('https://jsonplaceholder.typicode.com/todos?_limit=20')\n      .then(res => this.setState({todos: res.data}))\n  } \n\n  markComplete = (id) => {\n    this.setState({todos: this.state.todos.map(todo => {\n      if(todo.id === id){\n        todo.completed = !todo.completed\n      }\n      return todo;\n    })});\n  }\n\n  delTodo = (id) => {\n    axios.delete(`https://jsonplaceholder.typicode.com/todos/${id}`)\n      .then(res => this.setState({todos: \n        [...this.state.todos.filter(todo => todo.id!== id)]}))\n   \n  }\n\n  addTodo = (title) => {\n    // const newTodo = {\n    //   id: uuidv4(),\n    //   title: title,\n    //   completed: false\n    // }\n\n    axios.post('https://jsonplaceholder.typicode.com/todos', {\n      title,\n      completed: false\n    })\n    .then(res => this.setState({todos:\n       [...this.state.todos, res.data]}))\n     \n  }\nrender() {\n\n  return (\n    <Router>\n    <div className=\"App\"> \n    <div className=\"container\">\n      <Header />\n      <Route exact path=\"/\" render={props => (\n        <React.Fragment>\n           <AddTodo addTodo = {this.addTodo}/>\n           <Todos todos = {this.state.todos} markComplete = {this.markComplete}\n            delTodo = {this.delTodo}/>\n        </React.Fragment>\n      )} />\n     <Route path=\"/about\" component = {About}/>\n    </div>\n    </div>\n    </Router>\n  );\n  }\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}